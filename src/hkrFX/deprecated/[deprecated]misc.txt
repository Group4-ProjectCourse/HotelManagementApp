==============FileWriter FileReader===============
//        JSONObject employeeDetails = new JSONObject();
//        employeeDetails.put("firstName", "Lokesh");
//        employeeDetails.put("lastName", "Gupta");
//        employeeDetails.put("website", "howtodoinjava.com");
//        JSONArray employeeList = new JSONArray();
//        employeeList.add(employeeDetails);
//
//        try (FileWriter file = new FileWriter("employees.json", false)) {
//
//            file.write(employeeList.toJSONString());
//            file.flush();
//
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
//
//
//        HashMap<String, String> tran = null;
//
//        try (FileReader reader = new FileReader("employees.json"))
//        {
//            //Read JSON file
//            tran = Translation.dDeserialize(reader);
//
//        } catch (FileNotFoundException e) {
//            e.printStackTrace();
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
//        tran.entrySet().forEach(pair -> {
//            out.println(pair.getKey() + " " + pair.getValue());
//        });

// Decompiled with JetBrains decompiler
// Type: Rocket.Core.Logging.AsyncLoggerQueue
// Assembly: Rocket.Core, Version=2.4.8.0, Culture=neutral, PublicKeyToken=null
// MVID: C2202B74-A41D-4936-A1ED-852940413F9E
// Assembly location: \\Mac\Home\Documents\GitHub\BarricadeManager\lib\Rocket.Core.dll

using Rocket.Core.RCON;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;

namespace Rocket.Core.Logging
{
  public class AsyncLoggerQueue
  {
    public static AsyncLoggerQueue Current = new AsyncLoggerQueue();
    private static readonly object logEntryQueueLock = new object();
    private Queue<LogEntry> logEntryQueue = new Queue<LogEntry>();
    private BackgroundWorker logger = new BackgroundWorker();

    private AsyncLoggerQueue()
    {
      this.logger.WorkerSupportsCancellation = false;
      this.logger.DoWork += new DoWorkEventHandler(this._Logger_DoWork);
    }

    public void Enqueue(LogEntry le)
    {
      lock (AsyncLoggerQueue.logEntryQueueLock)
      {
        this.logEntryQueue.Enqueue(le);
        if (this.logger.IsBusy)
          return;
        this.logger.RunWorkerAsync();
      }
    }

    private void _Logger_DoWork(object sender, DoWorkEventArgs e)
    {
      while (true)
      {
        LogEntry entry = (LogEntry) null;
        bool flag = false;
        lock (AsyncLoggerQueue.logEntryQueueLock)
        {
          if (this.logEntryQueue.Count <= 0)
            break;
          if (this.logEntryQueue.Count > 1)
            flag = true;
          entry = this.logEntryQueue.Dequeue();
        }
        this.processLog(entry);
        if (flag)
        {
          lock (AsyncLoggerQueue.logEntryQueueLock)
          {
            if (this.logEntryQueue.Count <= 0)
              break;
          }
        }
      }
    }

    private void processLog(LogEntry entry)
    {
      StreamWriter streamWriter = File.AppendText(Path.Combine(Rocket.Core.Environment.LogsDirectory, Rocket.Core.Environment.LogFile));
      streamWriter.WriteLine("[" + (object) DateTime.Now + "] [" + entry.Severity.ToString() + "] " + entry.Message);
      streamWriter.Close();
      if (!entry.RCON || R.Settings == null || !R.Settings.Instance.RCON.Enabled)
        return;
      RCONServer.Broadcast(entry.Message);
    }
  }
}
